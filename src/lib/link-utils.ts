import { BookLink } from '@/types';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå
export function detectLinkType(url: string): BookLink['type'] {
  const urlLower = url.toLowerCase();
  
  if (urlLower.includes('drive.google.com') || urlLower.includes('docs.google.com')) {
    return 'google_drive';
  }
  if (urlLower.includes('dropbox.com')) {
    return 'dropbox';
  }
  if (urlLower.includes('1drv.ms') || urlLower.includes('onedrive.live.com')) {
    return 'onedrive';
  }
  if (urlLower.includes('mega.nz')) {
    return 'mega';
  }
  if (urlLower.includes('mediafire.com')) {
    return 'mediafire';
  }
  if (urlLower.includes('http://') || urlLower.includes('https://')) {
    return 'direct';
  }
  
  return 'other';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà
export function createBookLink(
  url: string, 
  title: string, 
  description?: string, 
  isPrimary: boolean = false
): BookLink {
  return {
    id: generateId(),
    type: detectLinkType(url),
    url,
    title,
    description,
    isPrimary,
    isActive: true
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå
export function validateLink(url: string): { isValid: boolean; error?: string } {
  try {
    const urlObj = new URL(url);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö protocol
    if (!['http:', 'https:'].includes(urlObj.protocol)) {
      return { isValid: false, error: 'URL ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô http ‡∏´‡∏£‡∏∑‡∏≠ https ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö domain
    const allowedDomains = [
      'drive.google.com',
      'docs.google.com',
      'dropbox.com',
      '1drv.ms',
      'onedrive.live.com',
      'mega.nz',
      'mediafire.com'
    ];
    
    const isAllowedDomain = allowedDomains.some(domain => 
      urlObj.hostname.includes(domain)
    );
    
    if (!isAllowedDomain) {
      return { isValid: false, error: '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö domain ‡∏ô‡∏µ‡πâ' };
    }
    
    return { isValid: true };
  } catch (error) {
    return { isValid: false, error: 'URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå
export function getLinkInfo(url: string): {
  type: BookLink['type'];
  domain: string;
  filename?: string;
} {
  const urlObj = new URL(url);
  const type = detectLinkType(url);
  
  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
  const pathname = urlObj.pathname;
  const filename = pathname.split('/').pop();
  
  return {
    type,
    domain: urlObj.hostname,
    filename: filename || undefined
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
export function formatLinkForDisplay(link: BookLink): {
  displayUrl: string;
  icon: string;
  color: string;
} {
  const icons = {
    google_drive: 'üìÅ',
    dropbox: 'üì¶',
    onedrive: '‚òÅÔ∏è',
    mega: 'üîí',
    mediafire: 'üî•',
    direct: 'üîó',
    other: 'üìÑ'
  };
  
  const colors = {
    google_drive: 'text-blue-600',
    dropbox: 'text-blue-500',
    onedrive: 'text-blue-700',
    mega: 'text-red-600',
    mediafire: 'text-orange-600',
    direct: 'text-gray-600',
    other: 'text-gray-500'
  };
  
  // ‡∏¢‡πà‡∏≠ URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const displayUrl = link.url.length > 50 
    ? link.url.substring(0, 50) + '...' 
    : link.url;
  
  return {
    displayUrl,
    icon: icons[link.type],
    color: colors[link.type]
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export async function checkLinkAvailability(url: string): Promise<boolean> {
  try {
    const response = await fetch(url, { 
      method: 'HEAD',
      mode: 'no-cors' // ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á CORS issues
    });
    return true;
  } catch (error) {
    return false;
  }
}
